// -------------------------------------------------------------------
/** Configuracion de GIT:
		https://education.github.com/git-cheat-sheet-education.pdf
 * Vamos a crear una conf. basica de manera global. Se utilizara en todos mis proyectos.
    - git config --global user.name " "
    - git config --global user.email " "
	- git config --list		<-  Ver la config

 * Podriamos establecer Configuraciones por Usuarios 
*/



// -------------------------------------------------------------------
 ** Repositorios:
	- git init		<--		inicia un repositorio (.git)
*/	



// -------------------------------------------------------------------
/** Estados de GIT
 * Puede tener 3 estados:
	1) Espacio de Trabajo: Directorio del Proyecto (.git NO es parte del ET.)
		- GIT aun no hace seguimiento/tracked

			- git status
			

	2) Area de preparacion: 
		- git add -A	<--		Mover ∀ los archivos del ET al AP

	2) Repositorio (.git)
		- git commit -m ''
*/



// -------------------------------------------------------------------
/** Nuestro 1er Commit
 * Commit: Cada spanshot de nuestro codigo.
	- git status
	- git add -A		<--	Podemos especificar archivos en especifico
	- git commit -m ''  <-- Agrega los archivos al Repositorio
	- git log			<--	Muestra los Commits con su Hash/ID
*/








// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
/** Opciones de git add & git commit
 * git add 
    -A		<--		Todos los Archivos
	. 		<--		Todos los archivos en el Current Directory


* git commit	<--		Open default editor
	-m ''		<--		Command line message
 
*/



// -------------------------------------------------------------------
/** Archivos nuevos / modificados
 * Archivos modificados
	- git commit -am ''		<--		Solo los Modificados

 * Archivos nuevos
	- git add -A
	- git commit -m ''
*/



// -------------------------------------------------------------------
/** Deshaciendo cambios
	- git checkout  FilePATH

 * Remover un archivo del Area de Preparaciona (AP)
	- git status		<--		Color verde :v
	- git restore --staged  <file/FilePATH>
	

 * Regresar a un commit anterior
	- Al anterios
		- git reset --hard HEAD 

	- A un commit en especifico (Hash)
		- git status 		<--		Copiar Hash
		- git reset --hard <CommitHASH>
*/



// -------------------------------------------------------------------
/** Ver cambios realizados en cada archivo
	- Mostrar los cambios entre los archivos del Repositorio con los del EP.
		- git diff <file/FilePATH>		<--		Detalladamente
			(-) 1L de codigo eliminada
			(+)	1L de codigo agregada

	- Mostrar los cambios en numeros, sin especificar.
		- git diff --stat <file/FilePATH>
*/








// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
/** Historial de cambios
 * Log de Commits: Commits ordenados cronologicamente
	- git log
 
 * Navegar entre Commits
	- git checkout <CommitHASH>

	- Volver de un commit pasado al Actual:
		- git checkout <nameBranch>
*/



// -------------------------------------------------------------------
/** Opciones de visualizacion del Historial
		https://git-scm.com/docs/git-log
 * Git Log
	- git log --raw			<--		Detalle de docs mutados
	- git log --oneline		<--		Hash and Message
		-n 5 				<--		5 Commits

	- Formatear el log:
		- git log --pretty=format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"
*/



// -------------------------------------------------------------------
/** Locale BRANCH
 * Ramas / Branch
	- git branch                    <--     Lista todas las ramas
    - git branch newBranchName   	<--     Crear ramas nuevas
	- git switch branchName       	<--   	Cambiar de rama
		Old School:
    		- git checkout branchName
	- git branch -D branchName		<--		Eliminar rama

	- git log --oneline --all		<--		Log de ∀ las ramas
	
	- git log --oneline --all --graph --decorate <--	Log de ∀ las ramas Grafica

*/



// -------------------------------------------------------------------
/** Fusionar ramas

	- git checkout branchName     <--	Rama a la que queremos Agregar el codigo nuevo
	- git merge branchName        <--	Rama que contiene el codigo nuevo
	- git status                  <--	Verificar que no se hizo un commit, but merge it

	- git branch -D branchName	  <--	Eliminar una rama despues de fusionarla
*/









// -------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////
/** Resolviendo conflictos
 * Cuando hacemos Merge de 2 ramas cuyo archivo fue modificado recientemente en la misma linea de codigo.
	- Resolver manualmente.
	- git commit ''
	- git merge --abort		<--		Deshacer el merge

	- git branch -D branchName	  <--	Eliminar una rama despues de fusionarla
*/



// -------------------------------------------------------------------
/** Ignorar archivos en GIT
 * .gitignore

*/



// -------------------------------------------------------------------
/** Ramas remotas
 * SSH Keys en github
	- Setting
		- SSH and GPG keys
			git@github.com:escueladigital/EDgrid.git

	- push: 
		- HEAD apunta a master en local y a origin/nameBranch en remoto
		- Ver a donde apunta el remoto
			- git remote -v

	- fetch:
		- Se puede traer info del remoto cuando se cambia en remoto
			- git pull origin master
*/




// -------------------------------------------------------------------
/** Subir nuestros cambios
 * Subir otras ramas
	- git branch newBranchName
	- git switch newBranchName
	- git push -u origin newBranchName

 * Eliminar desde local
	- git branch -D branchName	  <--	Eliminar una rama despues de fusionarla

 * Eliminar Branch remotas
	- git push --delete origin newBranchName
*/




// -------------------------------------------------------------------
/** 
*/




// -------------------------------------------------------------------
/** 
*/




// -------------------------------------------------------------------
/** 
*/




